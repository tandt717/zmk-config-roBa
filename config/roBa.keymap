#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        login_macro_1: login_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp N7 &kp N1 &kp N7 &kp Y &kp K &kp H &kp A &kp LS(T) &kp M &kp N1 &kp ENTER>;
            label = "LOGIN_MACRO_1";
        };

        login_macro_3: login_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp T &kp S &kp N1 &kp N2 &kp N2 &kp N3 &kp T &kp S &kp ENTER>;
            label = "LOGIN_MACRO_3";
        };

        login_macro_2: login_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp N7 &kp N1 &kp N7 &kp Y &kp K &kp H &kp A &kp T &kp M &kp ENTER>;
            label = "LOGIN_MACRO_3";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp W           &kp E         &kp R         &kp T                                                   &kp Y          &kp U  &kp I     &kp O     &mt MINUS P
&kp A         &kp S           &kp D         &kp F         &kp G             &kp ESC               &msc SCRL_DOWN  &kp H          &kp J  &kp K     &kp L     &kp ENTER
&kp Z         &kp X           &kp C         &kp V         &kp B             &kp TAB               &msc SCRL_UP    &kp N          &kp M  &mkp MB1  &mkp MB2  &mkp MB5
&kp LEFT_WIN  &kp LEFT_SHIFT  &kp LEFT_ALT  &lt 1 LC(UP)  &lt 2 LANGUAGE_2  &lt 3 LANGUAGE_1      &kp SPACE       &kp BACKSPACE                             &mkp MB4
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        SYMBOLS {
            bindings = <
&kp PERCENT  &kp DOLLAR  &kp HASH         &kp CARET     &kp TILDE                                     &kp BACKSLASH   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LESS_THAN  &kp GREATER_THAN
&kp COMMA    &kp PERIOD  &kp EXCLAMATION  &kp QUESTION  &kp AT     &trans             &kp LS(LG(N5))  &kp UNDERSCORE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMI       &kp COLON
&kp EQUAL    &kp PLUS    &kp MINUS        &kp ASTRK     &kp SLASH  &kp AMPERSAND      &kp LS(LG(N4))  &kp PIPE        &kp LBKT              &kp RBKT               &kp SQT        &kp DOUBLE_QUOTES
&trans       &trans      &trans           &trans        &trans     &trans             &trans          &trans                                                                      &kp LC(SEMICOLON)
            >;
        };

        NUM {
            bindings = <
&kp LEFT_PARENTHESIS  &kp N7        &kp N8  &kp N9  &kp RIGHT_PARENTHESIS                            &kp PG_UP       &none            &kp UP        &none           &none
&kp EQUAL             &kp NUMBER_4  &kp N5  &kp N6  &kp PLUS               &kp ASTERISK      &trans  &kp PG_DN       &kp LEFT         &kp DOWN      &kp RIGHT       &trans
&kp N0                &kp N1        &kp N2  &kp N3  &kp MINUS              &kp SLASH         &trans  &msc SCRL_DOWN  &msc SCRL_RIGHT  &msc SCRL_UP  &msc SCRL_LEFT  &trans
&trans                &trans        &trans  &trans  &trans                 &trans            &trans  &trans                                                         &trans
            >;
        };

        ARROW {
            bindings = <
&login_macro_1  &kp F7  &kp F8  &kp F9  &kp F10                                &bt BT_SEL 0          &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3           &bt BT_SEL 4
&login_macro_2  &kp F4  &kp F5  &kp F6  &kp F11  &none       &kp LS(LG(LEFT))  &kp LA(LS(LG(LEFT)))  &kp LC(LA(LEFT))  &kp LC(LA(RIGHT))  &kp LA(LS(LG(RIGHT)))  &kp LS(LG(RIGHT))
&login_macro_3  &kp F1  &kp F2  &kp F3  &kp F12  &none       &kp K_MUTE        &kp C_VOLUME_DOWN     &kp C_VOLUME_UP   &trans             &trans                 &none
&none           &none   &none   &trans  &trans   &trans      &trans            &trans                                                                            &bt BT_CLR
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &kp UP_ARROW    &trans           &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans          &trans           &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                             &trans
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
